// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BusinessListing {
  id                String   @id @default(cuid())
  bizBuySellId      String   @unique
  title             String
  askingPrice       Float?
  revenue           Float?
  cashFlow          Float?
  location          String
  state             String
  city              String?
  industry          String
  description       String   @db.Text
  listedDate        DateTime
  sellerFinancing   Boolean  @default(false)
  reasonForSelling  String?
  employees         Int?
  established       Int?
  imageUrls         String[]
  features          String[] @default([])
  contactName       String?
  contactEmail      String?
  contactPhone      String?
  brokerName        String?
  brokerCompany     String?
  listingUrl        String?
  scrapedAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  @@index([state])
  @@index([city])
  @@index([industry])
  @@index([askingPrice])
  @@index([revenue])
  @@index([cashFlow])
  @@index([listedDate])
  @@index([established])
  @@index([title])
  @@index([description])
  @@map("business_listings")
}

model ScrapeJob {
  id            String   @id @default(cuid())
  filters       Json
  status        ScrapeStatus @default(PENDING)
  progress      Int      @default(0)
  listingsFound Int      @default(0)
  duration      Int?     // milliseconds
  error         String?
  priority      Priority @default(NORMAL)
  maxListings   Int      @default(1000)
  enableWebhooks Boolean @default(false)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("scrape_jobs")
}

model FilterOption {
  id          String @id @default(cuid())
  category    String
  value       String
  label       String
  metadata    Json   @default("{}")
  isActive    Boolean @default(true)
  sortOrder   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, value])
  @@index([category, isActive])
  @@map("filter_options")
}

model ScrapingSession {
  id          String   @id @default(cuid())
  userAgent   String
  proxyUrl    String?
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  pagesScraped Int     @default(0)
  errors      Int      @default(0)
  status      SessionStatus @default(ACTIVE)

  @@map("scraping_sessions")
}

enum ScrapeStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  FAILED
}

model FilterSet {
  id          String @id @default(cuid())
  name        String
  description String?
  filters     Json
  isPublic    Boolean @default(false)
  usageCount  Int     @default(0)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("filter_sets")
}

model SearchHistory {
  id          String @id @default(cuid())
  filters     Json
  resultCount Int
  executionTime Int
  userAgent   String?
  ipAddress   String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@map("search_history")
}
